# Adapted from code by tschoonj

generated_source_files =    \
ddc_swig_wrap.c    \
ddc_swig_py
# ddc_swig.pyc       \
# ddc_swig.pyo	
CLEANFILES = ${generated_source_files}

EXTRA_DIST = ddc_swig.i 

# deleting files from distribution fails if done here
# needs to be done from src/Makefile.am - why?

dist-hook:
	@echo "(src/swig/Makefile) dist-hook.  distdir=$(distdir) top_distdir=$(top_distdir)"


# For some reason, if ddc_swig.py is in CLEANFILES, it is not deleted.   
# Just do the work in clean-local

clean-local:
	@echo "(src/swig/clean-local)"
	@echo "  CLEANFILES = |$(CLEANFILES)|"
	rm -f ddc_swig_wrap.c ddc_swig.py *.pyc *.pyo ddc_swig3_wrap.c ddc_swig3.py


if ENABLE_PYTHON_SWIG

# Python extension modules, installed in $(py2execdir) or $(py3execdir)
py2exec_LTLIBRARIES = _ddc_swig.la
py3exec_LTLIBRARIES = _ddc_swig3.la

# Corresponding extension module Python files
# Files in PYTHON primary are byte-compiled into .pyc and .pyo at install time.
# Uses pyexec_ prefix so it will be installed in same site-packages exec directory as the extension module
nodist_py2exec_PYTHON = ddc_swig.py
nodist_py3exec_PYTHON = ddc_swig3.py

# Flags when compiling files in _ddc_swig_la_SOURCES
_ddc_swig_la_CFLAGS = $(PYTHON_CFLAGS) 
# _ddc_swig_la_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/src/public $(PYTHON_CPPFLAGS)
_ddc_swig_la_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/src/public $(PY2_CFLAGS)
_ddc_swig_la_SOURCES = ddc_swig.c

# Link in the core library
# Any reason to just refer to libddcutil.so instead?
# By statically linking we can control the symbols visible.
# But the only usefully visible symbols are those used by SWIG
_ddc_swig_la_LIBADD = \
  ../libcommon.la \
  ../libddcutil.la
  
# The source code for the extension module, nodist because this file will be generated by swig
nodist__ddc_swig_la_SOURCES    = ddc_swig_wrap.c
nodist__ddc_swig_la_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/src/public $(PY2_CFLAGS)

# Global and order-independent shared library and program linker config flags and options 
# -module          forces libtool to generate a dynamically loadable module
# -static          do not link against shared libraries, all external references must be resolved from static libraries
# -shared          create a shared library
# -export-dynamic  add all symbols to dynamic symbol table, needed for dlopen
# -avoid-version   avoid versioning if possible (any effect on Linux?)
# -version-info
#
_ddc_swig_la_LDFLAGS =  
_ddc_swig_la_LDFLAGS +=  -module -shared -export-dynamic -static 
# should we use --avoid-version instead?  all examples seem to
_ddc_swig_la_LDFLAGS += -version-info '@LT_CURRENT@:@LT_REVISION@:@LT_AGE@'
_ddc_swig_la_LIBADD += $(PY2_EXTRA_LIBS)

#
# Python 3 version
#

# Flags when compiling files in _ddc_swig3_la_SOURCES
# _ddc_swig3_la_CFLAGS = $(PYTHON3_CFLAGS) 
# _ddc_swig3_la_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/src/public $(PYTHON3_CPPFLAGS)
_ddc_swig3_la_CFLAGS = -DPYTHON3
_ddc_swig3_la_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/src/public $(PY3_CFLAGS)
_ddc_swig3_la_SOURCES = ddc_swig.c

# Link in the core library
# Any reason to just refer to libddcutil.so instead?
# By statically linking we can control the symbols visible.
# But the only usefully visible symbols are those used by SWIG
_ddc_swig3_la_LIBADD = \
  ../libcommon.la \
  ../libddcutil.la
  
# The source code for the extension module, nodist because this file will be generated by swig
nodist__ddc_swig3_la_SOURCES    = ddc_swig3_wrap.c

# Global and order-independent shared library and program linker config flags and options 
# -module          forces libtool to generate a dynamically loadable module
# -static          do not link against shared libraries, all external references must be resolved from static libraries
# -shared          create a shared library
# -export-dynamic  add all symbols to dynamic symbol table, needed for dlopen
# -avoid-version   avoid versioning if possible (any effect on Linux?)
# -version-info
#
_ddc_swig3_la_LDFLAGS =  
_ddc_swig3_la_LDFLAGS +=  -module -shared -export-dynamic -static 
# should we use --avoid-version instead?  all examples seem to
_ddc_swig_la_LDFLAGS += -version-info '@LT_CURRENT@:@LT_REVISION@:@LT_AGE@'


all-local:
	@echo "==> (src/swig/Makefile) Executing target all-local...."
	chmod a+x pylocal
	if [ -e _ddc_swig.so ]; then \
	  echo "Link to _ddc_swig.so already exists";\
	else \
	  ln -s .libs/_ddc_swig.so _ddc_swig.so ; \
	fi;
	if [ -e _ddc_swig3.so ]; then \
	  echo "Link to _ddc_swig3.so already exists";\
	else \
	  ln -s .libs/_ddc_swig3.so _ddc_swig3.so ; \
	fi;


if HAVE_PYTHON3
install-exec-python3:
	@echo "  install-exec-python3 - HAVE_PYTHON3 version"
else
install-exec-python3:
	@echo "  install-exec-python3 - no PYTHON3 version"
endif


install-exec-local:
	@echo "===> (src/swig/Makefile) Executing.target install-exec-local....."

install-exec-hook: install-exec-python3
	@echo "==> (src/swig/Makefile) Executing.target install-exec-hook....."
	@echo "  py2execdir = ${py2execdir}"
	@echo "  py3execdir = ${py3execdir}"


#
# Run swig

# For debugging
show_vars:
	@echo "  AM_CFLAGS               = $(AM_CFLAGS)"
	@echo "  AM_CPPFLAGS             = $(AM_CPPFLAGS)"
	@echo "  AX_SWIG_PYTHON_CPPFLAGS = $(AX_SWIG_PYTHON_CPPFLAGS)"
	@echo "  AX_SWIG_PYTHON_LIBS     = $(AX_SWIG_PYTHON_LIBS)"
	@echo "  AX_SWIG_PYTHON_OPT      = $(AX_SWIG_PYTHON_OPT)"
	@echo "  PYTHON_CFLAGS           = $(PYTHON_CFLAGS)"
	@echo "  PYTHON_CPPFLAGS         = $(PYTHON_CPPFLAGS)"
	@echo "  PYTHON_EXEC_PREFIX      = $(PYTHON_EXEC_PREFIX)"
	@echo "  PYTHON_EXTRA_LDFLAGS    = $(PYTHON_EXTRA_LDFLAGS)"
	@echo "  PYTHON_EXTRA_LIBS       = $(PYTHON_EXTRA_LIBS)"

	@echo "  PY2_CFLAGS              = $(PY2_CFLAGS)"
	@echo "  PY2_LIBS                = $(PY2_LIBS)"
	@echo "  PY2_EXTRA_LDFLAGS       = $(PY2_EXTRA_LDFLAGS)"
	@echo "  PY2_EXTRA_LIBS          = $(PY2_EXTRA_LIBS)"
	@echo "  PY3_CFLAGS              = $(PY3_CFLAGS)"
	@echo "  PY3_LIBS                = $(PY3_LIBS)"
	@echo "  PY3_EXTRA_LDFLAGS       = $(PY3_EXTRA_LDFLAGS)"
	@echo "  PY3_EXTRA_LIBS          = $(PY3_EXTRA_LIBS)"
	@echo "  PYTHON_LDFLAGS          = $(PYTHON_LDFLAGS)"
	@echo "  PYTHON_LIBS             = $(PYTHON_LIBS)"
	@echo "  PYTHON_SITE_PKG         = $(PYTHON_SITE_PKG)"
	@echo "  PYTHON_SITE_PKG_EXEC    = $(PYTHON_SITE_PKG_EXEC)"
	@echo "  SWIG                    = $(SWIG) "
	@echo "  SWIG_LIB                = $(SWIG_LIB)"
	@echo "  includedir              = $(includedir)"
	@echo "  prefix                  = $(prefix)"
	@echo "  pyexecdir               = $(pyexecdir)"
	@echo "  pythondir               = $(pythondir)"
	@echo "  py2execdir               = $(py2execdir)"
	@echo "  py3execdir               = $(py3execdir)"
	@echo "  python3dir               = $(python3dir)"
	@echo "  srcdir                  = $(srcdir)"
	@echo "  top_srcdir              = $(top_srcdir)"

# old vars:
# @echo "  PY2_EXECDIR               = $(PY2_EXECDIR)"
# @echo "  PY3_EXECDIR               = $(PY3_EXECDIR)"


.PHONY: show_vars


# hack, how to look up compile include directory?   BUT NO LONGER NEEDED 
# swig_incs=-I/usr/lib/gcc/x86_64-linux-gnu/5/include -I/usr/include 
	                    
# add show_vars to dependencies for debugging

ddc_swig_wrap.c: ddc_swig.i ddc_swig.c ddc_swig.h   
	@echo "===> (src/swig/Makefile) Executing target ddc_swig_wrap.c"
	$(SWIG)   -I${top_srcdir}/src -I$(top_srcdir)/src/public  -includeall -o ddc_swig_wrap.c -python ddc_swig.i
			     
ddc_swig.py: ddc_swig_wrap.c
	@echo "===> (src/swig/Makefile) Executing target ddc_swig.py"

	                     
ddc_swig3_wrap.c: ddc_swig.i ddc_swig.c ddc_swig.h  
	@echo "===> (src/swig/Makefile) Executing target ddc_swig3_wrap.c"
	$(SWIG)   -I${top_srcdir}/src -DPYTHON3 -I$(top_srcdir)/src/public  -includeall -o ddc_swig3_wrap.c -python ddc_swig.i 
			     
ddc_swig3.py: ddc_swig3_wrap.c
	@echo "==> (src/swig/Makefile) Executing target ddc_swig3.py"
endif
